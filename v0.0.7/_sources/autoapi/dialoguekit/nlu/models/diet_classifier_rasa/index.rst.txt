dialoguekit.nlu.models.diet_classifier_rasa
===========================================

.. py:module:: dialoguekit.nlu.models.diet_classifier_rasa

.. autoapi-nested-parse::

   Rasa DIET classifier.

   More information about the DIET classifier
   https://rasa.com/docs/rasa/reference/rasa/nlu/classifiers/diet_classifier/

   A short description of how we use Rasa as a component library can be seen inn
   the docs/rasa_component_library.md



Classes
-------

.. autoapisummary::

   dialoguekit.nlu.models.diet_classifier_rasa.IntentClassifierRasa


Module Contents
---------------

.. py:class:: IntentClassifierRasa(intents: List[dialoguekit.core.intent.Intent], training_data_path: Optional[str] = '', model_path: Optional[str] = '.rasa')

   Bases: :py:obj:`dialoguekit.nlu.intent_classifier.IntentClassifier`


   Initializes the intent classifier.

   The training data path may be used with a Rasa nlu.yml file. It is also
   possible to use the self.train_model function with a list of Utterance
   and a list of Intent.

   :param intents: List of allowed intents.
   :param training_data_path: Path to the training data yml.
   :param model_path: Path to where rasa trained model will be stored.


   .. py:method:: init_pipeline() -> None

      Creates classifier and initialize.

      A component pipeline of Rasa components gets created and initialized.
      The DIET classifier object then gets created with the pipeline.

      :raises TypeError if training_data_path is not a string:



   .. py:method:: train_model(utterances: Optional[List[dialoguekit.core.utterance.Utterance]] = None, labels: Optional[List[dialoguekit.core.intent.Intent]] = None) -> None

      Trains a model based on a set of labeled utterances.

      If no utterances or labels are provided 'training_data_path'
      in the init is used for training the model.
      the utterances and labels are used for creating a rasa nlu
      document. Which then gets used for the training.

      :param utterances: List of Utterance instances.
      :param labels: List of associated intent labels.



   .. py:method:: classify_intent(utterance: dialoguekit.core.utterance.Utterance) -> dialoguekit.core.intent.Intent

      Classifies the intent of an utterance.

      The utterance gets transformed to a Rasa Message before being
      classified. If the utterance has already been processed a cache is used.
      Since DIET also extracts entities the cache is used if the same
      Classifier object is used.

      :param utterance: An utterance.

      :returns: Predicted intent.
      :rtype: Intent



   .. py:method:: get_annotations(utterance: dialoguekit.core.utterance.Utterance) -> List[dialoguekit.core.slot_value_annotation.SlotValueAnnotation]

      Entity extraction using rasa DIET classifier.

      Extracts entities using rasa DIET. Since this model
      does both intent classification and entity extraction,
      the cache is used if the same Utterance has been
      processes before.


      :param utterance: User utterance
      :type utterance: Utterance

      :returns: List of extracted entities
      :rtype: List[SlotValueAnnotation]



   .. py:method:: create_component(component_class: Type[rasa.engine.graph.GraphComponent], config: Dict[Text, Any], idx: int, model_storage: rasa.engine.storage.local_model_storage.LocalModelStorage) -> rasa.engine.graph.GraphComponent

      Creates a Rasa pipeline component.

      :param component_class:
      :type component_class: Type[GraphComponent]
      :param config: component configuration
      :type config: Dict[Text, Any]
      :param idx: id of component in pipeline
      :type idx: int
      :param model_storage: pipeline component storage
      :type model_storage: LocalModelStorage

      :returns: The pipeline component
      :rtype: GraphComponent



   .. py:method:: process_utterance(utterance: dialoguekit.core.utterance.Utterance) -> None

      Processes utterance and adds to cache.

      If it is the first time this utterance is processed it gets added to
      the cache. Next time the same utterance wants to get processed it gets
      skipped, as its processing result is in the cache.

      :param utterance: Agent or User Utterance



   .. py:method:: process_message(loaded_pipeline: List[rasa.engine.graph.GraphComponent], message: rasa.shared.nlu.training_data.message.Message) -> rasa.shared.nlu.training_data.message.Message

      Processes a Rasa Message through a pipeline.

      :param loaded_pipeline: Rasa pipeline
      :type loaded_pipeline: List[GraphComponent]
      :param message: Rasa message(utterance)
      :type message: Message

      :returns: processed message with data
      :rtype: Message



   .. py:method:: save_model(file_path: str) -> None
      :abstractmethod:


      Saves the trained model to a file.

      :param file_path: File path.

      :raises NotImplementedError: If not implemented in derived class.



   .. py:method:: load_model(file_path: str) -> None
      :abstractmethod:


      Loads a model from a file.

      :param file_path: File path.

      :raises NotImplementedError: If not implemented in derived class.



